<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>文科人的資訊筆記</title>
    <link>https://bijenchen.github.io/</link>
    <description>Recent content on 文科人的資訊筆記</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 26 Dec 2020 10:57:19 +0800</lastBuildDate><atom:link href="https://bijenchen.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SSH</title>
      <link>https://bijenchen.github.io/posts/roadmap-developer/general/ssh/</link>
      <pubDate>Sat, 26 Dec 2020 10:57:19 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/roadmap-developer/general/ssh/</guid>
      <description>SSH(Secure Shell) 作用 與遠端伺服器進行較為安全的連線
實現方式 以一組鑰匙(私鑰private key - 公鑰public key)分別存放在自己和遠端伺服器手上，透過配對鑰匙來進行訊息正確解密，達到隱蔽交換資料的目的。
過程 我們跟遠端伺服器會各自把自己的私鑰留在手上，互相交換公鑰給對方 (也就是交換後，手上持有的是自己的私鑰與對方的公鑰)。
當進行連線時，會先用對方的公鑰加密我們自己發出的訊息，把加密過的訊息傳給對方。
遠端伺服器收到加密過的訊息之後，會用手上的自己的私鑰解密進行解密，讀取正確的訊息內容。
所以，假設現在情境是要登入遠端伺服器，我們就會用手上持有的「遠端伺服器公鑰」把登入資訊加密，接著傳送給遠端伺服器。
伺服器因此會收到「以伺服器公鑰加密過的資料」，這時候因為伺服器手上握有跟這個伺服器公鑰成對的伺服器私鑰，所以可以用伺服器私鑰正確解密。
解密完後伺服器就會看到我們的登入資訊，因而放行讓我們登入。
參考資料  你該知道所有關於 SSH 的那些事 第十一章、遠端連線伺服器SSH / XDMCP / VNC / RDP  延伸閱讀  How to Create SSH Tunneling or Port Forwarding in Linux SSH Config File  </description>
    </item>
    
    <item>
      <title>Index of Database</title>
      <link>https://bijenchen.github.io/posts/2020/12/database-index/</link>
      <pubDate>Tue, 22 Dec 2020 09:12:41 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/2020/12/database-index/</guid>
      <description>索引的目的 為了讓找資料更快。但是這個「更快」是跟誰比較？是跟「沒有索引時從頭逐項查找」相比。
在查詢資料時索引值的用處 舉例有個資料表長這樣: table_A
   column is index ?     id v   name      如果現在搜尋的是索引欄位 SELECT * FROM table_A WHERE id = 3 會用 B+ 樹的概念搜尋 如果現在搜尋的不是索引欄位 SELECT * FROM table_A WHERE name = &amp;quot;Dingo&amp;quot; 跟沒設定索引一樣，只能逐筆找  索引類型 在 InnoDB 中，它有提供的索引基本上分為兩大類 :
 clustered Index secondary Index  覆蓋索引 ( covering index ) (預設)  內涵:????   連合索引 ( compound index )  內涵:用複數欄位組合成一組索引，建立的順序會影響 index 是否能成功使用以及 WHERE 條件如何下。   前綴索引 ( prefix index )  內涵:?</description>
    </item>
    
    <item>
      <title>SQL Syntax : CASE</title>
      <link>https://bijenchen.github.io/posts/2020/12/sql-case/</link>
      <pubDate>Mon, 21 Dec 2020 15:18:34 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/2020/12/sql-case/</guid>
      <description>SELECT CASE (&amp;quot;欄位名&amp;quot;) AS &amp;quot;別名&amp;quot; WHEN &amp;quot;條件1&amp;quot; THEN &amp;quot;結果1&amp;quot; WHEN &amp;quot;條件2&amp;quot; THEN &amp;quot;結果2&amp;quot; ... [ELSE &amp;quot;結果N&amp;quot;] END FROM &amp;quot;表格名&amp;quot;; 參考資料  SQL CASE  </description>
    </item>
    
    <item>
      <title>Compare</title>
      <link>https://bijenchen.github.io/posts/2020/12/compare/</link>
      <pubDate>Fri, 18 Dec 2020 15:03:13 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/2020/12/compare/</guid>
      <description>比較差異 比較大小 真實世界裡，可以量化、數值化、比較基準一致時，才有「比較大小」的意義。在電腦科學的世界裡也一樣，就算實際上程式不會報錯，也不是所有東西都應該用來比大小。
可以比大小的東西  數值、數字 日期時間(格式應為 timestamp, microsecond, &amp;hellip;&amp;hellip;，不是字串)  php  DateTime 系列   JavaScript  new Date() 將字串變成日期型別 Date.parse()      「不要」拿來比大小的東西  字串  因為字串會被轉成 ascii code, 依照 ascii code 的順序決定孰大孰小，在通常的情境下，字串比大小並沒有意義，比出來也不見得是預想中的效果。    常見錯誤 以下寫法不好，就算是在寫筆記或 temp code 也不要這樣寫，會顯得很沒 sence ，或者讓人誤會我們觀念不好。
 拿字串格式的數字字元比大小  &amp;lsquo;2&amp;rsquo;&amp;gt;&amp;lsquo;1&amp;rsquo;   拿字串格式的日期比大小  &amp;lsquo;2020-12-21&amp;rsquo;&amp;gt;&amp;lsquo;2020-12-01&amp;rsquo;    參考資料  PHP - The DateTime class PHP - Comparing two dates in PHP JavaScript - Date JavaScript - How to Compare Two Dates In JavaScript JavaScript - Date.</description>
    </item>
    
    <item>
      <title>XaaS</title>
      <link>https://bijenchen.github.io/posts/2020/12/xaas/</link>
      <pubDate>Tue, 01 Dec 2020 11:44:18 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/2020/12/xaas/</guid>
      <description>基於雲端運算的系列衍生  SaaS  Software as a Service, 軟體即服務 軟體僅需通過網路，不須經過傳統的安裝步驟即可使用，軟體及其相關的資料集中代管於雲端服務。   IaaS  Infrastructure as a Service, 基礎設施即服務   PaaS  platform as a service, 平台即服務   FaaS  無伺服器運算（英語：Serverless computing），Function-as-a-Service,功能即服務   EaaS  好啊，大家都要來 &amp;ldquo;aaS&amp;rdquo; 一下，2020 臺灣教育科技展的標語是「Education as a Service」&amp;hellip;&amp;hellip;好喔～XD    參考資料  SaaS IaaS PaaS FaaS  </description>
    </item>
    
    <item>
      <title>google sheet 條件格式設定自訂公式</title>
      <link>https://bijenchen.github.io/posts/2020/11/google-sheet-formula/</link>
      <pubDate>Mon, 30 Nov 2020 18:05:53 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/2020/11/google-sheet-formula/</guid>
      <description> 比較 A 欄 與 B 欄差異  套用範圍  B1:B100   自訂公式  $A1&amp;lt;&amp;gt;$B1  意義：同一列的 A 欄 不等於 B 欄，「$」的作用是鎖定，沒有加「$」的數值會隨著判斷變動   如果有複數條件，用 AND()  =AND($A1&amp;lt;&amp;gt;$B1,$C3&amp;lt;&amp;gt;&amp;ldquo;timestamp&amp;rdquo;)  意義：同上，且同一列的 C 欄 不等於 timestamp          注意事項  文字要用雙引號「&amp;quot;」包起來  參考資料  絕對參照與相對參照 Google 試算表函式清單  </description>
    </item>
    
    <item>
      <title>Select Data</title>
      <link>https://bijenchen.github.io/posts/2020/11/select-data/</link>
      <pubDate>Mon, 30 Nov 2020 18:04:49 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/2020/11/select-data/</guid>
      <description>原則 在決定查詢條件時，先確定報表撈取的目標(為了什麼目的-Why、想看到哪些欄位、如果有一對多的資料時誰該當主表)
 Why 為了什麼目的？ Where 資料在哪些表( table )裡？ What 想看到哪些欄位？ Who  是不是只要特定範圍的資料？(以「身份」作為限縮條件) 誰要看？需求是什麼？   When 是不是只要特定範圍的資料？(以「時間」作為限縮條件) How 決定 SQL , Subquery? Join?&amp;hellip;&amp;hellip;?  注意事項  如果有一對多的資料時誰該當主表？  依照需求判斷，想要長出怎樣的表？  e.g. table A 對 table B 為一對多 ( table A 1&amp;ndash;* table B ) 如果今天想看的是每筆 B 的 record 對應到 A 的資料，也就是「當 B 有 2 筆(b1,b2)、對應到一筆A資料(a1)時，總資料要有 2 筆」時，應該是這樣： SELECT * FROM table_B JOIN table_A  相反的，如果只在乎能對應到任一 B record 的 table A 資料，會變成： SELECT * FROM table_A JOIN table_B       參考資料     這很基本，小心不要迷失自己！</description>
    </item>
    
    <item>
      <title>Su User</title>
      <link>https://bijenchen.github.io/posts/2020/11/su-user/</link>
      <pubDate>Tue, 17 Nov 2020 11:45:41 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/2020/11/su-user/</guid>
      <description>這個單元有點邪惡，除非必要否則不要擅自進行。
在 linux 中想要偽裝成別的使用者操作的話，可以使用 su ( switch user ) 切換使用者。
使用的情境像是「要替已經下班的某位同事更新測試機程式」之類的狀況，因為對方的測試機只有當事人能 pull code，所以只好切換成對方的身份進行。
要注意的是，請確認對方真的沒有登入連線在做事，否則我幫對方 pull code ，可能會把對方正在執行中或修改中的東西蓋掉！
作法  有 sudo 權限的情況下  使用 sudo su [對方使用者名稱] 指令切換 $ sudo su [user_name]  要求輸入「執行 sudo 指令的使用者」的密碼 commend line 最前面會出現對方使用者帳號 對方使用者名稱@機器名稱:所在路徑$ my_partner@my_machine:/home/my_partner_folder$  使用完畢輸入 exit 指令，跳出偽裝 $ exit     參考資料 這是不用 sudo 的版本
 How to Use the su Command in Linux with Examples  </description>
    </item>
    
    <item>
      <title>Sleep</title>
      <link>https://bijenchen.github.io/posts/2020/11/sleep/</link>
      <pubDate>Wed, 11 Nov 2020 23:43:12 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/2020/11/sleep/</guid>
      <description>程式設計時有時候會需要用到「 sleep 」這個概念，
常見的情境是：需要頻繁訪問嬌貴對象的時候，在訪問中間穿插幾次休息，以免對象被訪問到掛掉。
例如： 無可避免需要跟資料庫用迴圈大量交易資料時、爬蟲去跟網站伺服器要資料時&amp;hellip;&amp;hellip;
這時候中間穿插的休息就很重要，適當的休息能降低訪問對象的負擔，
有時候因為穿插不固定的暫停時間，還能把程式運作偽裝成人類行為。
但是 sleep 濫用會造成程式執行過久、長時間佔用資源、增加執行失敗的風險等等狀況，
所以設計時需要注意一些事情：
 與資料庫連線時， sleep 的時間約 0.1~0.3 秒即可，視現實狀況再調整。  如果使用了 transaction ，盡量不要讓 transaction 開著太久，造成其他人無法對資料庫內容進行操作， 資料表被鎖住(lock)對自動執行的程式來說很困擾。 sleep 時間設定為浮動的原因，是為了試圖避免總是踩到特定秒數才有的雷，降低執行失敗的機率。   sleep 太久會讓程式執行的時間無謂地延長，增加中間出現變數的風險。  暫時不想深究的疑問：
 資料庫、伺服器等等「嬌貴」的原因是什麼？會有讓他們不再嬌貴的可行辦法嗎？  參考資料 以上概念還沒有找到相關資料來佐證，資料待查。
   </description>
    </item>
    
    <item>
      <title>What Is Hosting</title>
      <link>https://bijenchen.github.io/posts/roadmap-developer/backend/internet/what-is-hosting/</link>
      <pubDate>Mon, 19 Oct 2020 00:13:27 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/roadmap-developer/backend/internet/what-is-hosting/</guid>
      <description>Hosting 是什麼 ? 網頁代管(Web Hosting)，將網頁程式碼放到外部可連結的伺服器上，讓他人可以透過網際網路訪問網站內容。
案外案： 那 Hostname 又是什麼？ 在還沒有網際網路的時代，主機之間互相聯絡的方式就是自己製作一份主機的通訊錄(也就是常見的 /etc/hosts 那份檔案)，讓自己記得聯絡對象的 ip ，並且為該 ip 賦予一個我的主機認得的名字。 這個名字就稱為「Hostname」。
當自己主機要向外聯絡時，會優先去查看通訊錄裡是不是已經認得這個 Hostname ， 不認得時才會向外去 DNS 詢問是否有對應 Domain Name 。
因此可以做個實驗，在自己的 /etc/hosts 設定某個別的 ip 對應名稱為「www.google.com.tw」，設定完之後自己 ping 一下 www.google.com.tw 。 會發現回應的 ip 不再是 google 的主機 ip ，而是新設定的 ip ，對我自己的主機來說， www.google.com.tw 這個名字已經被別人取代，再也不會連到跟大家一樣的 google 首頁了。
 畢竟 DNS 系統是晚於通訊錄方式出現，算是在當時既有的模式之上進行擴充，所以通訊錄查詢會被優先使用也是合理現象。
 參考資料  wiki-網頁代管服務 什麼是網頁寄存 (What is Web Hosting)  關於 Hostname 的資料來源待補充  []  可能還需要知道的知識  分辨網址列裡的成分：Uniform Resource Identifier Domain name Host name  </description>
    </item>
    
    <item>
      <title>What Is Domain Name</title>
      <link>https://bijenchen.github.io/posts/roadmap-developer/backend/internet/what-is-domain-name/</link>
      <pubDate>Mon, 19 Oct 2020 00:13:14 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/roadmap-developer/backend/internet/what-is-domain-name/</guid>
      <description>Domain Name 是什麼 ? 用來對應特定 IP 的一組有意義文字。
Domain Name 產生的原因 大部分的人類很難記得 IP 這種純數字的組合，所以設計出「由人類易於辨識的文字代表一組 IP 」的機制。
 關於 IP(Internet Protocol,網際網路協定) 的說明，可以參照 網路運作原理
 其他知識  一組 IP 可以擁有很多 Domain Name Domain Name 要去找網路服務商(例如 中華電信Hinet )代為購買 想知道想登記的 Domain Name 是否已被買走，可以用 Whois 查詢登記資料。  參考資料  TWNIC(Taiwan Network Information Center,財團法人台灣網路資訊中心)科普教學文  </description>
    </item>
    
    <item>
      <title>Dns and How It Works</title>
      <link>https://bijenchen.github.io/posts/roadmap-developer/backend/internet/dns-and-how-it-works/</link>
      <pubDate>Mon, 19 Oct 2020 00:13:02 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/roadmap-developer/backend/internet/dns-and-how-it-works/</guid>
      <description>DNS 是什麼 ? 他們是如何運作 ? DNS 是什麼 Domain Name System ，紀錄數字IP與文字網址對應關係的地方。 概念上像是把我家的經緯度座標變成中文地址的地政系統一樣的東西。
如何運作 就是把「 IP 」與「對應的網址」的對應關係存起來，讓人類可以雙向查詢對應內容。
參考資料  wiki aws  </description>
    </item>
    
    <item>
      <title>Browsers and How They Work</title>
      <link>https://bijenchen.github.io/posts/roadmap-developer/backend/internet/browsers-and-how-they-work/</link>
      <pubDate>Mon, 19 Oct 2020 00:12:47 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/roadmap-developer/backend/internet/browsers-and-how-they-work/</guid>
      <description>瀏覽器有哪些 ? 他們是如何運作 ? 瀏覽器有哪些 瀏覽百家爭鳴欸！光是版面引擎(layout engines)就有 6 套以上！
然後行動裝置的網頁瀏覽器又是另一個戰場。還有只顯示文字不顯示圖片的瀏覽器，長知識！@A@
如何運作  The User Interface The Browser Engine The Rendering Engine Networking JavaScript Interpreter UI Backend Data Persistence/Storage  html,css 的部分由 Rendering Engine (layout engines) 負責解析，解析後拋給瀏覽器(Browser Engine)引擎。 JavaScript 編譯出來的內容也由 Rendering Engine 收集、網路連線也是 Rendering Engine 處理。
Browser Engine 負責拿 Rendering Engine 給的資料和 Storage 的內容去長畫面給人類看。
參考資料  wiki How does web browsers work?  </description>
    </item>
    
    <item>
      <title>What Is Http</title>
      <link>https://bijenchen.github.io/posts/roadmap-developer/backend/internet/what-is-http/</link>
      <pubDate>Mon, 19 Oct 2020 00:11:41 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/roadmap-developer/backend/internet/what-is-http/</guid>
      <description>Http 是什麼 ? 偷 Mars 的定義來用XD 「HTTP 是一個跑在應用層(Application Layer)上，client與server之間，request和response的標準。」
也就是用來讓 client 與 server 都能讀懂，彼此互相溝通的東西。
 ＊ 應用層(Application Layer) 是什麼？ 關於網路階層，開另一篇介紹。
 參考資料  MarsW的部落格  </description>
    </item>
    
    <item>
      <title>How Does the Internet Work</title>
      <link>https://bijenchen.github.io/posts/roadmap-developer/backend/internet/how-does-the-internet-work/</link>
      <pubDate>Mon, 19 Oct 2020 00:07:56 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/roadmap-developer/backend/internet/how-does-the-internet-work/</guid>
      <description>網路如何運作 ? 網際網路設計的初衷 讓機器(電腦)彼此之間可以連線，互通資訊。
達成方式 設計出彼此溝通的規範: 網際網路協定 Internet Protocol (IP) 每臺機器都有一組自己獨有的 IP，作為表示自身位址的資訊，讓機器之間可以找到對方。 由四組數字組成，每組數字的區間都是 0~255。 日後被稱為 IPv4
 由於 IPv4 上限僅為 $2^8$ x $2^8$ x $2^8$ x $2^8$ = $2^32$ 個，無法應日漸蓬勃的網路運用需求，所以 IPv6 應運而生，將 IP 範圍擴充為 $16^32$ = $2^128$ 個。
  //TODO: RRRRR可惡，想用 LaTex 語法！
 建構連線網路 早期是借用遍布率廣泛的電話系統線路作為機器之間的連線途徑，個體用戶往中繼點連線、中繼點往更大的上層中繼點連線，以此類推直到將每臺機器都串在一起。 隨著網際網路的需求增高，現代已經不再佔用電話線路，改由專屬的網路線路提供連線途徑，架構的大致概念仍然維持。
參考資料  MDN web docs stanford IP  IPv6 IPv4 認識IPv4與IPv6的差異    </description>
    </item>
    
    <item>
      <title>Change Custom Style</title>
      <link>https://bijenchen.github.io/posts/2020/10/change-custom-style/</link>
      <pubDate>Sun, 18 Oct 2020 22:48:56 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/2020/10/change-custom-style/</guid>
      <description>目標 想要在每篇文章顯示最後更新時間，最好能自動吃存檔時間。
過程紀錄  閱讀 Learn Theme for Hugo 教學文件的 Style customization 章節，知道了套用主題時，應該在跟 content 同層級的 layouts 放樣板html，如果想要加入自訂 header ，應該在 layouts/partials/ 增加一個名為 custom-header.html 的檔案， Learn Theme 的 header.html 會去吃 custom-header.html 增加到主題的 header 中。 閱讀 hugo 官方文件的 front-matte 章節，發現有 last modified 的參數可用 lastmod 。  在 hugo 官網搜尋「lastmod」關鍵字，找到 .Lastmod function 的說明，發現 lastmod 可以吃 git 資訊，但是要設定 config 。 config 詳細的設定也附上了連結「front matter configuration for dates」。   原本不知道如何寫 custom-header ，但是因為 google 搜尋 hogo LastMod 參數時，找到這篇，看起來應該可以直接用，所以把 lastmod 的 html code 丟進去我自己的 custom-header.</description>
    </item>
    
    <item>
      <title>初探&amp;建環境</title>
      <link>https://bijenchen.github.io/posts/2020/10/laravel5-book-kj-01/</link>
      <pubDate>Sun, 04 Oct 2020 15:24:32 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/2020/10/laravel5-book-kj-01/</guid>
      <description>閱讀書籍： Laravel 5 for beginner 新手道場 作者： 洪可郡（KeJyun）  博客來連結 gitbook  Laravel 初探   開發網站使用框架的理由
 當我們遇到以下情境，使用框架會帶來不少好處：  整個網站的功能複雜，需要一個系統化、層級明確、分工清楚的程式架構，以便規劃與維護  note: 就像小團隊可以不用明確組織架構也能順利運作，但到一定規模以後每個部門就會有明確層級跟分工，一但出現新任務才會知道要找誰來做。也像是東西要分門別類收好，要用的時候才容易找。   有時程壓力，需要迅速完工  note: 大多數專案都會用到的功能，框架通常會很貼心地幫我們做好，讓我們可以直接使用，省時省工。而在自己的程式架構中，把功能切得越獨立，也越容易單獨提取、重複使用，一樣省時省工。   需要跟他人合作打造專案  note: 彼此都懂使用的框架在寫什麼、在幹嘛，可以省去很多解釋與溝通的時間。就像大家都知道什麼作用的工具放在哪裡，不用說明就能自行找到並且拿來用。     note: 框架有分前端和後端，但「需要框架的情境」、「框架帶來的好處」不分前後端都適用    選框架的方法
 維護性  如果打算開發商業產品，至少要選「有 LTS(Long-term support) 版本可用」的框架  note: 才不會變成沒人維護的孤兒專案，找到 bug 至少還有人會去改。   框架更新是成本，如果是商業產品，請務必謹慎評估後再更新。如果有好好寫單元測試(Unit test)的話，至少可以在更新時確保更新前後程式都能滿足相同的商業邏輯，不會出錯。   擴充性  該框架是否容易引入套件、套件選擇多  note: 專案需求千奇百怪，但框架通常是以大家的最大公約數在設計。如果框架本身對套件的包容性高，就能接納其他高手提供的套件，使用該框架的人也會越來越多。當使用的人變多，框架的 bug 就越容易被發現與修復，增加框架的穩定度。使用上會更加安心～   加碼說明： php 的套件管理工具「 composer 」  note: 套件管理工具會聰明的判斷使用哪個版本號的套件，避免更新之後新舊版本互斥、程式掛掉。     因為 Laravel 滿足上述所有條件，使用者多、安裝方便、擴充性也很夠，觀察使用者社群趨勢也還維持成長狀態，所以選擇 Laravel 作為開發專案的框架。    設定 Laravel 開發環境   Laravel 很貼心地幫大家降低環境阻礙，提供 Homestead 虛擬環境給開發者。所以第一步就是建立 Homestead 虛擬環境，原則上依照 laravel 官網 的 documentation 步驟走就行了。(我選的是 laravel 7.</description>
    </item>
    
    <item>
      <title>關於：用 hugo 搭配 github page 打造一個自己的部落格</title>
      <link>https://bijenchen.github.io/posts/2020/10/setting-github-page-with-hugo-murmur/</link>
      <pubDate>Fri, 02 Oct 2020 18:05:44 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/2020/10/setting-github-page-with-hugo-murmur/</guid>
      <description>緣起 碰壁紀錄 節外生枝 後記 參考資料  緣起 做這件事的初衷其實是我想要把 github 當學習紀錄來用，順便讓自己熟悉 git 的使用。 雖然可以單純把每篇筆記做成 .md 檔案放到 github 裡，但是在檢視上似乎又不是非常方便，用手機看 github 時情感上覺得不太順眼，所以想要用 github.io 建立一個靜態網站當作部落格使用。
再來，由於對調校前端畫面沒什麼興趣，想要找現成的畫面模板套不同的文章內容，讓維護部落格這件事情可以最單純化，所以搜尋「 github blog 」看看大家都是怎麼做。找到這篇和這篇，得到了看起來派得上用場的三個新名詞「 Jekyll 」、「 hexo 」和「 hugo 」，丟去 google 搜尋後大致知道這三個都是「靜態網站生成器」，主要的功能是提供模板與網頁生成引擎(參考的是這篇)，讓我們可以在不必研究網頁要如何長出來的情況下運作一個靜態網站。
(但是我的直覺告訴我：「網頁生成引擎如何運作」這個知識對後端工程師來說逃得了一時、逃不了一世。嗯&amp;hellip;&amp;hellip;希望未來的自己來打臉現在的我？ XD )
因為我相信實際使用之後才能真正體會三者的差異以及找出自己的偏好，所以借助網路上的比拚文簡單判斷後，就決定從 hugo 開始實驗，反正之後發現不喜歡就換一個嘛～
碰壁紀錄   遇到 GitHub &amp;ldquo;fatal: remote origin already exists&amp;rdquo;
 處理方式：重新指定遠端數據庫位置  git remote set-url origin git@github.com:[your_github_account]/[repository].git  your_github_account:遠端數據庫擁有者的帳號名稱 repository:遠端數據庫名稱 git remote set-url origin 後面接的就是在 github 上想要用 ssh 下載專案時顯示的專案位址      遇到 error:src refspec master does not match any</description>
    </item>
    
    <item>
      <title>用 hugo 搭配 github page 打造一個自己的部落格</title>
      <link>https://bijenchen.github.io/posts/2020/10/setting-github-page-with-hugo/</link>
      <pubDate>Fri, 02 Oct 2020 14:26:05 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/2020/10/setting-github-page-with-hugo/</guid>
      <description>目標 前置作業 執行步驟  使用 hugo 產生靜態網頁  1. 安裝 hugo 2. 安裝完之後可以確認一下是否成功安裝。 3. 成功安裝後，產生 hugo 架構的網頁專案檔案。 4. 將整個專案加入 git 版本控制 5. 安裝主題 6. 增加一篇文章 7. 在本地預覽網站(含草稿)   建立 Repository  1. 建立自己的 github.io Repository 2. 建立自己 hugo site 的 Repository   發布至 github.io  1. 確認想發布的文章已經完稿(已非草稿狀態) 2. 在 hugo site 專案資料夾中產生一個 public 資料夾， public 資料夾要引用自己的 github.io 的專案內容 3. 將 hugo site 裡編輯過的內容轉成網頁內容 4. 將產生的 public 的內容推上 github.</description>
    </item>
    
  </channel>
</rss>
