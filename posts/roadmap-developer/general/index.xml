<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>共通知識 on 文科人的資訊筆記</title>
    <link>https://bijenchen.github.io/posts/roadmap-developer/general/</link>
    <description>Recent content in 共通知識 on 文科人的資訊筆記</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 18 Oct 2020 23:58:20 +0800</lastBuildDate><atom:link href="https://bijenchen.github.io/posts/roadmap-developer/general/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SSH</title>
      <link>https://bijenchen.github.io/posts/roadmap-developer/general/ssh/</link>
      <pubDate>Sat, 26 Dec 2020 10:57:19 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/roadmap-developer/general/ssh/</guid>
      <description>SSH(Secure Shell) 作用 與遠端伺服器進行較為安全的連線
實現方式 以一組鑰匙(私鑰private key - 公鑰public key)分別存放在自己和遠端伺服器手上，透過配對鑰匙來進行訊息正確解密，達到隱蔽交換資料的目的。
過程 我們跟遠端伺服器會各自把自己的私鑰留在手上，互相交換公鑰給對方 (也就是交換後，手上持有的是自己的私鑰與對方的公鑰)。
當進行連線時，會先用對方的公鑰加密我們自己發出的訊息，把加密過的訊息傳給對方。
遠端伺服器收到加密過的訊息之後，會用手上的自己的私鑰解密進行解密，讀取正確的訊息內容。
所以，假設現在情境是要登入遠端伺服器，我們就會用手上持有的「遠端伺服器公鑰」把登入資訊加密，接著傳送給遠端伺服器。
伺服器因此會收到「以伺服器公鑰加密過的資料」，這時候因為伺服器手上握有跟這個伺服器公鑰成對的伺服器私鑰，所以可以用伺服器私鑰正確解密。
解密完後伺服器就會看到我們的登入資訊，因而放行讓我們登入。
如何增加 ssh key 到 bitbucket 中，並且使用自訂的 hostname 連線資訊 如何使用不同的 ssh key 連線 在 .ssh 目錄下建立 config 檔案 /Users/bijen/.ssh 注意， config 檔案要跟 private &amp;amp; public key 放在相同層級中。
config 內容寫法 Host [your-ssh-name / 未來使用ssh連線時的代稱，可自行取名] HostName [ip or domain / 連線的目的地 ip 或 domain name] User [connect-account / 用來連線的帳號] PreferredAuthentications [驗證方式] IdentitiesOnly [是否只接受 ssh key 登入] IdentityFile [absolute path/ 用來驗證的檔案絕對位置，例如 public key path] UseKeychain [?</description>
    </item>
    
  </channel>
</rss>
