<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>12月 on 文科人的資訊筆記</title>
    <link>https://bijenchen.github.io/posts/2020/12/</link>
    <description>Recent content in 12月 on 文科人的資訊筆記</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://bijenchen.github.io/posts/2020/12/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Index of Database</title>
      <link>https://bijenchen.github.io/posts/2020/12/database-index/</link>
      <pubDate>Tue, 22 Dec 2020 09:12:41 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/2020/12/database-index/</guid>
      <description>索引的目的 為了讓找資料更快。但是這個「更快」是跟誰比較？是跟「沒有索引時從頭逐項查找」相比。
 【情境模擬】 假設我們上網徵求「動畫推薦」，得到一些回應像這樣： 18:30 A網友「鋼鍊啦鋼鍊！」 18:45 B網友「有鋼鍊那也要推個銀之匙才行」 19:10 C網友「魔法阿嬤」 19:12 D網友「樂園追放，讚」 20:07 E網友「月刊少女野崎同學，會看到笑死」 21:17 F網友「夏目友人帳～」
所以我們得到了一份原始資料長這樣： 鋼之鍊金術師 銀之匙 魔法阿嬤 樂園追放 月刊少女野崎同學 夏目友人帳
當我們想要找這份動畫推薦清單裡有沒有某部動畫時， 最原始的做法就是從第一個檢查最後一個，這也是資料庫最原始的搜尋資料方式。
如果今天有人問我「樂園追放」這部動畫有沒有在清單裡？ 我的印象是「我記得中間有人畫風一變，推了個『魔法阿嬤』，然後後面回答馬上又用『樂園追放』把畫風修回日本動畫了 XD」 這時候就有點帶進了「索引」觀念，因為這次我們不是一筆一筆檢查，而是直接由「魔法阿嬤」切入， 找到緊接在後的「樂園追放」，當清單內容變多時，「直接從某點切入搜索」的速度有很高的機率會比「逐項尋找」快速。
演算法裡的「二元搜尋樹」也是這樣的概念。找資料時從當下的切入點開始兵分兩路，直到找到目標。 「你要找的動畫是『魔法阿嬤』嗎？」 &amp;ndash;&amp;gt; 不是 「資料在『魔法阿嬤』之前還是之後？」 &amp;ndash;&amp;gt; 之後 「資料在『月刊少女野崎同學』之前還是之後？」 &amp;ndash;&amp;gt; 之前 「你要找的動畫是『樂園追放』嗎？」 &amp;ndash;&amp;gt; 是
更進一步，我們也可以將資料進行排序，例如將動畫按照出版年份或者作品名字的字數排序，試著加快搜尋的過程， 這就是不同索引方式的演進。
 索引的實現 「索引」概念是強烈吃重演算法觀念的領域，「要如何安排資料才能找得更快、耗能更低」正是演算法大展長才之處。 根據索引背後使用的演算法不同，在不同資料情境下可能會產生搜尋速度的落差。
不同資料庫實現「索引」的方式也不盡相同，如果好奇的話需要研究該資料庫的底層設計。
在查詢資料時索引值的用處 舉例有個資料表長這樣，而我們用的資料庫是 MySQL(InnoDB): table_A
   column is index ?     id v   name      如果現在搜尋的是索引欄位 SELECT * FROM table_A WHERE id = 3 會用 B+ 樹的概念搜尋 如果現在搜尋的不是索引欄位 SELECT * FROM table_A WHERE name = &amp;quot;Dingo&amp;quot; 跟沒設定索引一樣，只能逐筆找   InnoDB: MySQL 資料庫可以採用的其中一種資料庫引擎，跟 InnoDB 相同作用的還有 MyISAM, MyRocks &amp;hellip;&amp;hellip; 等。更多資訊可參考 wiki - MySQL資料庫引擎的比較</description>
    </item>
    
    <item>
      <title>SQL Syntax : CASE</title>
      <link>https://bijenchen.github.io/posts/2020/12/sql-case/</link>
      <pubDate>Mon, 21 Dec 2020 15:18:34 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/2020/12/sql-case/</guid>
      <description>SELECT CASE (&amp;quot;欄位名&amp;quot;) AS &amp;quot;別名&amp;quot; WHEN &amp;quot;條件1&amp;quot; THEN &amp;quot;結果1&amp;quot; WHEN &amp;quot;條件2&amp;quot; THEN &amp;quot;結果2&amp;quot; ... [ELSE &amp;quot;結果N&amp;quot;] END FROM &amp;quot;表格名&amp;quot;; 參考資料  SQL CASE  </description>
    </item>
    
    <item>
      <title>Compare</title>
      <link>https://bijenchen.github.io/posts/2020/12/compare/</link>
      <pubDate>Fri, 18 Dec 2020 15:03:13 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/2020/12/compare/</guid>
      <description>比較差異 比較大小 真實世界裡，可以量化、數值化、比較基準一致時，才有「比較大小」的意義。在電腦科學的世界裡也一樣，就算實際上程式不會報錯，也不是所有東西都應該用來比大小。
可以比大小的東西  數值、數字 日期時間(格式應為 timestamp, microsecond, &amp;hellip;&amp;hellip;，不是字串)  php  DateTime 系列   JavaScript  new Date() 將字串變成日期型別 Date.parse()      「不要」拿來比大小的東西  字串  因為字串會被轉成 ascii code, 依照 ascii code 的順序決定孰大孰小，在通常的情境下，字串比大小並沒有意義，比出來也不見得是預想中的效果。    常見錯誤 以下寫法不好，就算是在寫筆記或 temp code 也不要這樣寫，會顯得很沒 sence ，或者讓人誤會我們觀念不好。
 拿字串格式的數字字元比大小  &amp;lsquo;2&amp;rsquo;&amp;gt;&amp;lsquo;1&amp;rsquo;   拿字串格式的日期比大小  &amp;lsquo;2020-12-21&amp;rsquo;&amp;gt;&amp;lsquo;2020-12-01&amp;rsquo;    參考資料  PHP - The DateTime class PHP - Comparing two dates in PHP JavaScript - Date JavaScript - How to Compare Two Dates In JavaScript JavaScript - Date.</description>
    </item>
    
    <item>
      <title>XaaS</title>
      <link>https://bijenchen.github.io/posts/2020/12/xaas/</link>
      <pubDate>Tue, 01 Dec 2020 11:44:18 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/2020/12/xaas/</guid>
      <description>基於雲端運算的系列衍生  SaaS  Software as a Service, 軟體即服務 軟體僅需通過網路，不須經過傳統的安裝步驟即可使用，軟體及其相關的資料集中代管於雲端服務。   IaaS  Infrastructure as a Service, 基礎設施即服務   PaaS  platform as a service, 平台即服務   FaaS  無伺服器運算（英語：Serverless computing），Function-as-a-Service,功能即服務   EaaS  好啊，大家都要來 &amp;ldquo;aaS&amp;rdquo; 一下，2020 臺灣教育科技展的標語是「Education as a Service」&amp;hellip;&amp;hellip;好喔～XD    參考資料  SaaS IaaS PaaS FaaS  </description>
    </item>
    
  </channel>
</rss>
