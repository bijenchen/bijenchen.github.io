<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>github page on 文科人的資訊筆記</title>
    <link>https://bijenchen.github.io/tags/github-page/</link>
    <description>Recent content in github page on 文科人的資訊筆記</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 18 Oct 2020 22:48:56 +0800</lastBuildDate><atom:link href="https://bijenchen.github.io/tags/github-page/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Change Custom Style</title>
      <link>https://bijenchen.github.io/posts/2020/10/change-custom-style/</link>
      <pubDate>Sun, 18 Oct 2020 22:48:56 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/2020/10/change-custom-style/</guid>
      <description>目標 想要在每篇文章顯示最後更新時間，最好能自動吃存檔時間。
過程紀錄  閱讀 Learn Theme for Hugo 教學文件的 Style customization 章節，知道了套用主題時，應該在跟 content 同層級的 layouts 放樣板html，如果想要加入自訂 header ，應該在 layouts/partials/ 增加一個名為 custom-header.html 的檔案， Learn Theme 的 header.html 會去吃 custom-header.html 增加到主題的 header 中。 閱讀 hugo 官方文件的 front-matte 章節，發現有 last modified 的參數可用 lastmod 。  在 hugo 官網搜尋「lastmod」關鍵字，找到 .Lastmod function 的說明，發現 lastmod 可以吃 git 資訊，但是要設定 config 。 config 詳細的設定也附上了連結「front matter configuration for dates」。   原本不知道如何寫 custom-header ，但是因為 google 搜尋 hogo LastMod 參數時，找到這篇，看起來應該可以直接用，所以把 lastmod 的 html code 丟進去我自己的 custom-header.</description>
    </item>
    
    <item>
      <title>關於：用 hugo 搭配 github page 打造一個自己的部落格</title>
      <link>https://bijenchen.github.io/posts/2020/10/setting-github-page-with-hugo-murmur/</link>
      <pubDate>Fri, 02 Oct 2020 18:05:44 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/2020/10/setting-github-page-with-hugo-murmur/</guid>
      <description>緣起 碰壁紀錄 節外生枝 後記 參考資料  緣起 做這件事的初衷其實是我想要把 github 當學習紀錄來用，順便讓自己熟悉 git 的使用。 雖然可以單純把每篇筆記做成 .md 檔案放到 github 裡，但是在檢視上似乎又不是非常方便，用手機看 github 時情感上覺得不太順眼，所以想要用 github.io 建立一個靜態網站當作部落格使用。
再來，由於對調校前端畫面沒什麼興趣，想要找現成的畫面模板套不同的文章內容，讓維護部落格這件事情可以最單純化，所以搜尋「 github blog 」看看大家都是怎麼做。找到這篇和這篇，得到了看起來派得上用場的三個新名詞「 Jekyll 」、「 hexo 」和「 hugo 」，丟去 google 搜尋後大致知道這三個都是「靜態網站生成器」，主要的功能是提供模板與網頁生成引擎(參考的是這篇)，讓我們可以在不必研究網頁要如何長出來的情況下運作一個靜態網站。
(但是我的直覺告訴我：「網頁生成引擎如何運作」這個知識對後端工程師來說逃得了一時、逃不了一世。嗯&amp;hellip;&amp;hellip;希望未來的自己來打臉現在的我？ XD )
因為我相信實際使用之後才能真正體會三者的差異以及找出自己的偏好，所以借助網路上的比拚文簡單判斷後，就決定從 hugo 開始實驗，反正之後發現不喜歡就換一個嘛～
碰壁紀錄   遇到 GitHub &amp;ldquo;fatal: remote origin already exists&amp;rdquo;
 處理方式：重新指定遠端數據庫位置  git remote set-url origin git@github.com:[your_github_account]/[repository].git your_github_account:遠端數據庫擁有者的帳號名稱 repository:遠端數據庫名稱 git remote set-url origin 後面接的就是在 github 上想要用 ssh 下載專案時顯示的專案位址      遇到 error:src refspec master does not match any</description>
    </item>
    
    <item>
      <title>用 hugo 搭配 github page 打造一個自己的部落格</title>
      <link>https://bijenchen.github.io/posts/2020/10/setting-github-page-with-hugo/</link>
      <pubDate>Fri, 02 Oct 2020 14:26:05 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/2020/10/setting-github-page-with-hugo/</guid>
      <description>目標 前置作業 執行步驟  使用 hugo 產生靜態網頁  1. 安裝 hugo 2. 安裝完之後可以確認一下是否成功安裝。 3. 成功安裝後，產生 hugo 架構的網頁專案檔案。 4. 將整個專案加入 git 版本控制 5. 安裝主題 6. 增加一篇文章 7. 在本地預覽網站(含草稿)   建立 Repository  1. 建立自己的 github.io Repository 2. 建立自己 hugo site 的 Repository   發布至 github.io  1. 確認想發布的文章已經完稿(已非草稿狀態) 2. 在 hugo site 專案資料夾中產生一個 public 資料夾， public 資料夾要引用自己的 github.io 的專案內容 3. 將 hugo site 裡編輯過的內容轉成網頁內容 4. 將產生的 public 的內容推上 github.</description>
    </item>
    
  </channel>
</rss>
