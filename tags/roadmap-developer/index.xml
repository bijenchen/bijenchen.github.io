<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>roadmap-developer on 文科人的資訊筆記</title>
    <link>https://bijenchen.github.io/tags/roadmap-developer/</link>
    <description>Recent content in roadmap-developer on 文科人的資訊筆記</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 26 Dec 2020 10:57:19 +0800</lastBuildDate><atom:link href="https://bijenchen.github.io/tags/roadmap-developer/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SSH</title>
      <link>https://bijenchen.github.io/posts/roadmap-developer/general/ssh/</link>
      <pubDate>Sat, 26 Dec 2020 10:57:19 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/roadmap-developer/general/ssh/</guid>
      <description>SSH(Secure Shell) 作用 與遠端伺服器進行較為安全的連線
實現方式 以一組鑰匙(私鑰private key - 公鑰public key)分別存放在自己和遠端伺服器手上，透過配對鑰匙來進行訊息正確解密，達到隱蔽交換資料的目的。
過程 我們跟遠端伺服器會各自把自己的私鑰留在手上，互相交換公鑰給對方 (也就是交換後，手上持有的是自己的私鑰與對方的公鑰)。
當進行連線時，會先用對方的公鑰加密我們自己發出的訊息，把加密過的訊息傳給對方。
遠端伺服器收到加密過的訊息之後，會用手上的自己的私鑰解密進行解密，讀取正確的訊息內容。
所以，假設現在情境是要登入遠端伺服器，我們就會用手上持有的「遠端伺服器公鑰」把登入資訊加密，接著傳送給遠端伺服器。
伺服器因此會收到「以伺服器公鑰加密過的資料」，這時候因為伺服器手上握有跟這個伺服器公鑰成對的伺服器私鑰，所以可以用伺服器私鑰正確解密。
解密完後伺服器就會看到我們的登入資訊，因而放行讓我們登入。
如何增加 ssh key 到 bitbucket 中，並且使用自訂的 hostname 連線資訊 如何使用不同的 ssh key 連線 在 .ssh 目錄下建立 config 檔案 /Users/bijen/.ssh 注意， config 檔案要跟 private &amp;amp; public key 放在相同層級中。
config 內容寫法 Host [your-ssh-name / 未來使用ssh連線時的代稱，可自行取名] HostName [ip or domain / 連線的目的地 ip 或 domain name] User [connect-account / 用來連線的帳號] PreferredAuthentications [驗證方式] IdentitiesOnly [是否只接受 ssh key 登入] IdentityFile [absolute path/ 用來驗證的檔案絕對位置，例如 public key path] UseKeychain [?</description>
    </item>
    
    <item>
      <title>What Is Hosting</title>
      <link>https://bijenchen.github.io/posts/roadmap-developer/backend/internet/what-is-hosting/</link>
      <pubDate>Mon, 19 Oct 2020 00:13:27 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/roadmap-developer/backend/internet/what-is-hosting/</guid>
      <description>Hosting 是什麼 ? 網頁代管(Web Hosting)，將網頁程式碼放到外部可連結的伺服器上，讓他人可以透過網際網路訪問網站內容。
案外案： 那 Hostname 又是什麼？ 在還沒有網際網路的時代，主機之間互相聯絡的方式就是自己製作一份主機的通訊錄(也就是常見的 /etc/hosts 那份檔案)，讓自己記得聯絡對象的 ip ，並且為該 ip 賦予一個我的主機認得的名字。 這個名字就稱為「 Hostname 」。
當自己主機要向外聯絡時，會優先去查看通訊錄裡是不是已經認得這個 Hostname ， 不認得時才會向外去 DNS 詢問是否有對應 Domain Name 。
因此可以做個實驗，在自己的 /etc/hosts 設定某個別的 ip 對應名稱為「www.google.com.tw」，設定完之後自己 ping 一下 www.google.com.tw 。 會發現回應的 ip 不再是 google 的主機 ip ，而是新設定的 ip ，對我自己的主機來說， www.google.com.tw 這個名字已經被別人取代，再也不會連到跟大家一樣的 google 首頁了。
 畢竟 DNS 系統是晚於通訊錄方式出現，算是在當時既有的模式之上進行擴充，所以通訊錄查詢會被優先使用也是合理現象。
 參考資料  wiki-網頁代管服務 什麼是網頁寄存 (What is Web Hosting)  關於 Hostname 的資料來源待補充  []  可能還需要知道的知識  分辨網址列裡的成分：Uniform Resource Identifier Domain name Host name  </description>
    </item>
    
    <item>
      <title>What Is Domain Name</title>
      <link>https://bijenchen.github.io/posts/roadmap-developer/backend/internet/what-is-domain-name/</link>
      <pubDate>Mon, 19 Oct 2020 00:13:14 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/roadmap-developer/backend/internet/what-is-domain-name/</guid>
      <description>Domain Name 是什麼 ? 用來對應特定 IP 的一組有意義文字。
Domain Name 產生的原因 大部分的人類很難記得 IP 這種純數字的組合，所以設計出「由人類易於辨識的文字代表一組 IP 」的機制。
 關於 IP(Internet Protocol,網際網路協定) 的說明，可以參照 網路運作原理
 其他知識  一組 IP 可以擁有很多 Domain Name Domain Name 要去找網路服務商(例如 中華電信Hinet )代為購買 想知道想登記的 Domain Name 是否已被買走，可以用 Whois 查詢登記資料。  參考資料  TWNIC(Taiwan Network Information Center,財團法人台灣網路資訊中心)科普教學文  </description>
    </item>
    
    <item>
      <title>Dns and How It Works</title>
      <link>https://bijenchen.github.io/posts/roadmap-developer/backend/internet/dns-and-how-it-works/</link>
      <pubDate>Mon, 19 Oct 2020 00:13:02 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/roadmap-developer/backend/internet/dns-and-how-it-works/</guid>
      <description>DNS 是什麼 ? 他們是如何運作 ? DNS 是什麼 Domain Name System ，紀錄數字IP與文字網址對應關係的地方。 概念上像是把我家的經緯度座標變成中文地址的地政系統一樣的東西。
如何運作 就是把「 IP 」與「對應的網址」的對應關係存起來，讓人類可以雙向查詢對應內容。
domain name 與 hostname 的不同  domain name: 網域名稱 hostname: 主機名稱  舉例: www.abcabc.com.tw
 有一台提供 .tw 網域的主機 (hostname 叫做: tw) 隸屬於 .tw 網域底下，有一台提供 com.tw 網域的主機 (hostname 叫做: com) 隸屬於 com.tw 網域底下，有一台提供 abcabc.com.tw 網域的主機 (hostname 叫做: abcabc) 隸屬於 abcabc.com.tw 網域底下，有一台提供 www 服務的主機 (hostname 叫做: www)  參考資料  wiki aws 第十九章、主機名稱控制者： DNS 伺服器  domain name 與 hostname 的不同    </description>
    </item>
    
    <item>
      <title>Browsers and How They Work</title>
      <link>https://bijenchen.github.io/posts/roadmap-developer/backend/internet/browsers-and-how-they-work/</link>
      <pubDate>Mon, 19 Oct 2020 00:12:47 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/roadmap-developer/backend/internet/browsers-and-how-they-work/</guid>
      <description>瀏覽器有哪些 ? 他們是如何運作 ? 瀏覽器有哪些 瀏覽百家爭鳴欸！光是版面引擎(layout engines)就有 6 套以上！
然後行動裝置的網頁瀏覽器又是另一個戰場。還有只顯示文字不顯示圖片的瀏覽器，長知識！@A@
如何運作  The User Interface The Browser Engine The Rendering Engine Networking JavaScript Interpreter UI Backend Data Persistence/Storage  html,css 的部分由 Rendering Engine (layout engines) 負責解析，解析後拋給瀏覽器(Browser Engine)引擎。 JavaScript 編譯出來的內容也由 Rendering Engine 收集、網路連線也是 Rendering Engine 處理。
Browser Engine 負責拿 Rendering Engine 給的資料和 Storage 的內容去長畫面給人類看。
參考資料  wiki How does web browsers work?  </description>
    </item>
    
    <item>
      <title>What Is Http</title>
      <link>https://bijenchen.github.io/posts/roadmap-developer/backend/internet/what-is-http/</link>
      <pubDate>Mon, 19 Oct 2020 00:11:41 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/roadmap-developer/backend/internet/what-is-http/</guid>
      <description>Http 是什麼 ? 偷 Mars 的定義來用XD 「HTTP 是一個跑在應用層(Application Layer)上，client與server之間，request和response的標準。」
也就是用來讓 client 與 server 都能讀懂，彼此互相溝通的東西。
 ＊ 應用層(Application Layer) 是什麼？ 關於網路階層，開另一篇介紹。
 參考資料  MarsW的部落格  </description>
    </item>
    
    <item>
      <title>How Does the Internet Work</title>
      <link>https://bijenchen.github.io/posts/roadmap-developer/backend/internet/how-does-the-internet-work/</link>
      <pubDate>Mon, 19 Oct 2020 00:07:56 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/roadmap-developer/backend/internet/how-does-the-internet-work/</guid>
      <description>網路如何運作 ? 網際網路設計的初衷 讓機器(電腦)彼此之間可以連線，互通資訊。
達成方式 設計出彼此溝通的規範: 網際網路協定 Internet Protocol (IP) 每臺機器都有一組自己獨有的 IP，作為表示自身位址的資訊，讓機器之間可以找到對方。 由四組數字組成，每組數字的區間都是 0~255。 日後被稱為 IPv4
 由於 IPv4 上限僅為 $2^8$ x $2^8$ x $2^8$ x $2^8$ = $2^32$ 個，無法應日漸蓬勃的網路運用需求，所以 IPv6 應運而生，將 IP 範圍擴充為 $16^32$ = $2^128$ 個。
  //TODO: RRRRR可惡，想用 LaTex 語法！
 建構連線網路 早期是借用遍布率廣泛的電話系統線路作為機器之間的連線途徑，個體用戶往中繼點連線、中繼點往更大的上層中繼點連線，以此類推直到將每臺機器都串在一起。 隨著網際網路的需求增高，現代已經不再佔用電話線路，改由專屬的網路線路提供連線途徑，架構的大致概念仍然維持。
參考資料  MDN web docs stanford IP  IPv6 IPv4 認識IPv4與IPv6的差異    </description>
    </item>
    
  </channel>
</rss>
