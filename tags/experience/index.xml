<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>experience on 文科人的資訊筆記</title>
    <link>https://bijenchen.github.io/tags/experience/</link>
    <description>Recent content in experience on 文科人的資訊筆記</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 21 Dec 2020 15:18:34 +0800</lastBuildDate><atom:link href="https://bijenchen.github.io/tags/experience/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SQL Syntax : CASE</title>
      <link>https://bijenchen.github.io/posts/2020/12/sql-case/</link>
      <pubDate>Mon, 21 Dec 2020 15:18:34 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/2020/12/sql-case/</guid>
      <description>SELECT CASE (&amp;quot;欄位名&amp;quot;) AS &amp;quot;別名&amp;quot; WHEN &amp;quot;條件1&amp;quot; THEN &amp;quot;結果1&amp;quot; WHEN &amp;quot;條件2&amp;quot; THEN &amp;quot;結果2&amp;quot; ... [ELSE &amp;quot;結果N&amp;quot;] END FROM &amp;quot;表格名&amp;quot;; 參考資料  SQL CASE  </description>
    </item>
    
    <item>
      <title>Compare</title>
      <link>https://bijenchen.github.io/posts/2020/12/compare/</link>
      <pubDate>Fri, 18 Dec 2020 15:03:13 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/2020/12/compare/</guid>
      <description>比較差異 比較大小 真實世界裡，可以量化、數值化、比較基準一致時，才有「比較大小」的意義。在電腦科學的世界裡也一樣，就算實際上程式不會報錯，也不是所有東西都應該用來比大小。
可以比大小的東西  數值、數字 日期時間(格式應為 timestamp, microsecond, &amp;hellip;&amp;hellip;，不是字串)  php  DateTime 系列   JavaScript  new Date() 將字串變成日期型別 Date.parse()      「不要」拿來比大小的東西  字串  因為字串會被轉成 ascii code, 依照 ascii code 的順序決定孰大孰小，在通常的情境下，字串比大小並沒有意義，比出來也不見得是預想中的效果。    常見錯誤 以下寫法不好，就算是在寫筆記或 temp code 也不要這樣寫，會顯得很沒 sence ，或者讓人誤會我們觀念不好。
 拿字串格式的數字字元比大小  &amp;lsquo;2&amp;rsquo;&amp;gt;&amp;lsquo;1&amp;rsquo;   拿字串格式的日期比大小  &amp;lsquo;2020-12-21&amp;rsquo;&amp;gt;&amp;lsquo;2020-12-01&amp;rsquo;    參考資料  PHP - The DateTime class PHP - Comparing two dates in PHP JavaScript - Date JavaScript - How to Compare Two Dates In JavaScript JavaScript - Date.</description>
    </item>
    
    <item>
      <title>google sheet 條件格式設定自訂公式</title>
      <link>https://bijenchen.github.io/posts/2020/11/google-sheet-formula/</link>
      <pubDate>Mon, 30 Nov 2020 18:05:53 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/2020/11/google-sheet-formula/</guid>
      <description> 比較 A 欄 與 B 欄差異  套用範圍  B1:B100   自訂公式  $A1&amp;lt;&amp;gt;$B1  意義：同一列的 A 欄 不等於 B 欄，「$」的作用是鎖定，沒有加「$」的數值會隨著判斷變動   如果有複數條件，用 AND()  =AND($A1&amp;lt;&amp;gt;$B1,$C3&amp;lt;&amp;gt;&amp;ldquo;timestamp&amp;rdquo;)  意義：同上，且同一列的 C 欄 不等於 timestamp          注意事項  文字要用雙引號「&amp;quot;」包起來  參考資料  絕對參照與相對參照 Google 試算表函式清單  </description>
    </item>
    
    <item>
      <title>Select Data</title>
      <link>https://bijenchen.github.io/posts/2020/11/select-data/</link>
      <pubDate>Mon, 30 Nov 2020 18:04:49 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/2020/11/select-data/</guid>
      <description>原則 在決定查詢條件時，先確定報表撈取的目標(為了什麼目的-Why、想看到哪些欄位、如果有一對多的資料時誰該當主表)
 Why 為了什麼目的？ Where 資料在哪些表( table )裡？ What 想看到哪些欄位？ Who  是不是只要特定範圍的資料？(以「身份」作為限縮條件) 誰要看？需求是什麼？   When 是不是只要特定範圍的資料？(以「時間」作為限縮條件) How 決定 SQL , Subquery? Join?&amp;hellip;&amp;hellip;?  注意事項  如果有一對多的資料時誰該當主表？  依照需求判斷，想要長出怎樣的表？  e.g. table A 對 table B 為一對多 ( table A 1&amp;ndash;* table B ) 如果今天想看的是每筆 B 的 record 對應到 A 的資料，也就是「當 B 有 2 筆(b1,b2)、對應到一筆A資料(a1)時，總資料要有 2 筆」時，應該是這樣： SELECT * FROM table_B JOIN table_A  相反的，如果只在乎能對應到任一 B record 的 table A 資料，會變成： SELECT * FROM table_A JOIN table_B       參考資料     這很基本，小心不要迷失自己！</description>
    </item>
    
    <item>
      <title>Su User</title>
      <link>https://bijenchen.github.io/posts/2020/11/su-user/</link>
      <pubDate>Tue, 17 Nov 2020 11:45:41 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/2020/11/su-user/</guid>
      <description>這個單元有點邪惡，除非必要否則不要擅自進行。
在 linux 中想要偽裝成別的使用者操作的話，可以使用 su ( switch user ) 切換使用者。
使用的情境像是「要替已經下班的某位同事更新測試機程式」之類的狀況，因為對方的測試機只有當事人能 pull code，所以只好切換成對方的身份進行。
要注意的是，請確認對方真的沒有登入連線在做事，否則我幫對方 pull code ，可能會把對方正在執行中或修改中的東西蓋掉！
作法  有 sudo 權限的情況下  使用 sudo su [對方使用者名稱] 指令切換 $ sudo su [user_name]  要求輸入「執行 sudo 指令的使用者」的密碼 commend line 最前面會出現對方使用者帳號 對方使用者名稱@機器名稱:所在路徑$ my_partner@my_machine:/home/my_partner_folder$  使用完畢輸入 exit 指令，跳出偽裝 $ exit     參考資料 這是不用 sudo 的版本
 How to Use the su Command in Linux with Examples  </description>
    </item>
    
    <item>
      <title>Sleep</title>
      <link>https://bijenchen.github.io/posts/2020/11/sleep/</link>
      <pubDate>Wed, 11 Nov 2020 23:43:12 +0800</pubDate>
      
      <guid>https://bijenchen.github.io/posts/2020/11/sleep/</guid>
      <description>程式設計時有時候會需要用到「 sleep 」這個概念，
常見的情境是：需要頻繁訪問嬌貴對象的時候，在訪問中間穿插幾次休息，以免對象被訪問到掛掉。
例如： 無可避免需要跟資料庫用迴圈大量交易資料時、爬蟲去跟網站伺服器要資料時&amp;hellip;&amp;hellip;
這時候中間穿插的休息就很重要，適當的休息能降低訪問對象的負擔，
有時候因為穿插不固定的暫停時間，還能把程式運作偽裝成人類行為。
但是 sleep 濫用會造成程式執行過久、長時間佔用資源、增加執行失敗的風險等等狀況，
所以設計時需要注意一些事情：
 與資料庫連線時， sleep 的時間約 0.1~0.3 秒即可，視現實狀況再調整。  如果使用了 transaction ，盡量不要讓 transaction 開著太久，造成其他人無法對資料庫內容進行操作， 資料表被鎖住(lock)對自動執行的程式來說很困擾。 sleep 時間設定為浮動的原因，是為了試圖避免總是踩到特定秒數才有的雷，降低執行失敗的機率。   sleep 太久會讓程式執行的時間無謂地延長，增加中間出現變數的風險。  暫時不想深究的疑問：
 資料庫、伺服器等等「嬌貴」的原因是什麼？會有讓他們不再嬌貴的可行辦法嗎？  參考資料 以上概念還沒有找到相關資料來佐證，資料待查。
   </description>
    </item>
    
  </channel>
</rss>
